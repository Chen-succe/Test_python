from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import numpy as np
import random


def randome_line(x):
    k, b = random.normalvariate(0, 1), random.normalvariate(0, 1)
    return k * x + b


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


sub_x = np.linspace(-10, 10)
index = np.random.choice(range(len(sub_x)))
y = np.concatenate(
    (randome_line(sigmoid(randome_line(sub_x[:index]))), randome_line(sigmoid(randome_line(sub_x[index:])))))


def animate(i):
    fig.clear()
    sub_x = np.linspace(-100, 100)  # 把范围扩大
    index = np.random.choice(range(len(sub_x)))
    y = np.concatenate(
        (randome_line(sigmoid(randome_line(sub_x[:index]))), randome_line(sigmoid(randome_line(sub_x[index:])))))
    plt.plot(sub_x, y, c=np.random.rand(3, ))  # c是表示颜色
    plt.title('Complexity Functions Generated by Simple Functions')


fig = plt.gcf()
ani = FuncAnimation(fig, animate, interval=300)
plt.show()

# 使用一个线性函数和一个sigmoid函数就可以生成很多复杂的函数。
# 所以，使用简单的函数元素，我们就可以拟合非常多的复杂函数。
# 就不需要针对各种复杂的现实情况去拟合不同的复杂函数
